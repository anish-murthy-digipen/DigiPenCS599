#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "shared_structs.h"
#include "rng.glsl"

#define pi (3.141592)
#define pi2 (2.0*pi)

// The ray payload; structure is defined in shared_structs.h;
// Attached to a ray, and used to communicate between shader stages.
layout(location=0) rayPayloadEXT RayPayload payload;

// Push constant for ray tracing; structure is defined in shared_structs.h;
// Filled in by application, and pushed to shaders as part of the pipeline invocation
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

// Ray tracing descriptor set: 0:acceleration structure, and 1: color output image
layout(set=0, binding=0) uniform accelerationStructureEXT topLevelAS;
layout(set=0, binding=1, rgba32f) uniform image2D colCurr; // Output image: m_rtColCurrBuffer
// Many more buffers (at bindings 2 ... 7) will be added to this eventually.

// Object model descriptor set: 0: matrices, 1:object buffer addresses, 2: texture list
layout(set=1, binding=0) uniform _MatrixUniforms { MatrixUniforms mats; };
layout(set=1, binding=1, scalar) buffer ObjDesc_ { ObjDesc i[]; } objDesc;
layout(set=1, binding=2) uniform sampler2D textureSamplers[];

// Object buffered data; dereferenced from ObjDesc addresses;  Must be global
layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; }; // Position, normals, ..
layout(buffer_reference, scalar) buffer Indices {ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials {Material m[]; }; // Array of all materials
layout(buffer_reference, scalar) buffer MatIndices {int i[]; }; // Material ID for each triangle

// @@ Raycasting: Write EvalBrdf -- The BRDF lighting calculation
//  vec3 EvalBrdf(vec3 N, vec3 L, vec3 V, Material mat) { }

// @@ Pathtracing: Write SampleBrdf, PdfBrdf, ...
//   vec3 SampleBrdf(inout uint seed, in vec3 N) { }
//   float PdfLight(float area) { }
// and more

// Given a ray's payload indicating a triangle has been hit
// (payload.instanceIndex, and payload.primitiveIndex),
// lookup/calculate the material, texture and normal at the hit point
// from the three vertices of the hit triangle.
void GetHitObjectData(out Material mat, out vec3 nrm)
{
    // Object data (containing 4 device addresses)
    ObjDesc    objResources = objDesc.i[payload.instanceIndex];
    
    // Dereference the object's 4 device addresses
    Vertices   vertices    = Vertices(objResources.vertexAddress);
    Indices    indices     = Indices(objResources.indexAddress);
    Materials  materials   = Materials(objResources.materialAddress);
    MatIndices matIndices  = MatIndices(objResources.materialIndexAddress);
  
    // Use gl_PrimitiveID to access the triangle's vertices and material
    ivec3 ind    = indices.i[payload.primitiveIndex]; // The triangle hit
    int matIdx   = matIndices.i[payload.primitiveIndex]; // The triangles material index
    mat = materials.m[matIdx]; // The triangles material

    // Vertex of the triangle (Vertex has pos, nrm, tex)
    Vertex v0 = vertices.v[ind.x];
    Vertex v1 = vertices.v[ind.y];
    Vertex v2 = vertices.v[ind.z];

    // Compute normal at hit position using the provided barycentric coordinates.
    const vec3 bc = payload.bc; // The barycentric coordinates of the hit point
    nrm  = bc.x*v0.nrm + bc.y*v1.nrm + bc.z*v2.nrm; // Normal = combo of three vertex normals

    // If the material has a texture, read texture and use as the
    // point's diffuse color.
    if (mat.textureId >= 0) {
        vec2 uv =  bc.x*v0.texCoord + bc.y*v1.texCoord + bc.z*v2.texCoord;
        uint txtId = objResources.txtOffset + mat.textureId; // tex coord from three vertices
        mat.diffuse = texture(textureSamplers[(txtId)], uv).xyz; }
}

void main() 
{
    // Raycasting: Since the alignment of pcRay is SO easy to get wrong, test it
    // here and flag problems with a fully red screen.
    if (pcRay.alignmentTest != 1234) {
        imageStore(colCurr, ivec2(gl_LaunchIDEXT.xy), vec4(1,0,0,0));
        return; }
    
    // This shader's invocation is for the pixel indicated by
    // gl_LaunchIDEXT. Calculate that pixel's center (in NDC) and
    // convert to a ray in world coordinates.
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 pixelNDC = pixelCenter/vec2(gl_LaunchSizeEXT.xy)*2.0 - 1.0;
 
    vec3 eyeW    = (mats.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 pixelH = mats.viewInverse * mats.projInverse * vec4(pixelNDC.x, pixelNDC.y, 1, 1);
    vec3 pixelW = pixelH.xyz/pixelH.w;

    // This pixel's ray:
    vec3 rayOrigin    = eyeW;
    vec3 rayDirection = normalize(pixelW - eyeW);

    // The ray-casting / path-tracing block/loop will store the
    // pixel's calculated color in C.
    vec3 C = vec3(0,0,0);
    // The path tracing algorithm will accumulate a product of f/p weights in W.
    vec3 W = vec3(1,1,1);
    
    // @@ Pathtracing: Initialize random pixel seed *very* carefully! (See notes.)
    // payload.seed = tea(gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.frameSeed);
    // @@ History: Initialize first-hit data
    
    // @@ Raycasting: Notice that all the ray casting code is places
    // in this loop that's not really a loop since it executes only
    // once.  WHY?  Just looking ahead a bit into the next (path
    // tracing) project where this loop will actually loop.

    // @@ Pathtracing: Eventually, this will be the Monte-Carlo loop.
    for (int i=0; i<1;  i++)
        {
        payload.hit = false;
        // Fire the ray;  hit or miss shaders will be invoked, passing results back in the payload
        traceRayEXT(topLevelAS,           // acceleration structure
                    gl_RayFlagsOpaqueEXT, // rayFlags
                    0xFF,                 // cullMask
                    0,                    // sbtRecordOffset for the hitgroups
                    0,                    // sbtRecordStride for the hitgroups
                    0,                    // missIndex
                    rayOrigin,            // ray origin
                    0.001,                // ray min range
                    rayDirection,                 // ray direction
                    10000.0,              // ray max range
                    0                     // payload (location = 0)
                    );

        // If nothing was hit
        if (!payload.hit) {
            // @@ Raycasting: break from the (wanna-be) loop
            // @@ Pathtracing: break from the Monte-Carlo loop
            // @@ History: if (i==0) record that a first-hit did not occur
        }
        
        // If something was hit, find the object data.
        Material mat;
        vec3 nrm;
        GetHitObjectData(mat, nrm);
        
        // @@ History: if (i==0) record first-hit stuff.
        // Test if the hit point's material is a light 
        if (dot(mat.emission,mat.emission) > 0.0) {
            // @@ RayCasting: Accumulate (via C) the light's emission value
            //    C += mat.emission*pcRay.exposure;
            // @@ Pathtracing: Accumulate (via C) the light's emission value
            //     times W (the product of the path's BRDFs)
            //      C += W * mat.emission*pcRay.exposure;
            // @@ Explicit: Same as pathtracing, but with a factor of 1/2
            //      C += 0.5 * W * mat.emission*pcRay.exposure;
            break; }

        // @@ Explicit light connection (if implemented) goes here

        // @@ Raycasting: Do lighting calculation here
        //   C += LIGHT * (N dot Wi) * EvalBRDF(N, Wi, Wo, mat)
        // Data for the calculation:
        //   Normal N = normalize(nrm) 
        //   Light input direction Wi = normalize(pcRay.scLightPos-payload.hitPos)
        //   Light output direction Wo = -rayDirection (Note the negation!)
        //   Light value from pcRay.scLightInt
        //   Material properties from mat possibly modified by a texture
        // As a great debugging aid. try C += abs(nrm); 

        // @@ Pathtracing:  Accumulate product of lighting calculations into W.
        //   Sample random direction Wi = ?
        //   Calculate f = (N dot Wi) * EvalBRDF(N, L, V, mat)
        //   Calculate p = ?
        //   Accumulate f/p into W;  No C += here anymore.
        //   Setup for next loop iteration.

        } // End of Monte-Carlo block/loop

    // @@ Raycasting: Write C to the output pixel
    imageStore(colCurr, ivec2(gl_LaunchIDEXT.xy), vec4(C,1.0));
    // @@ Pathtracing: Accumulate C into output pixel.
    // @@ History: Accumulate C with a back-projected pixel and write to the output pixel

}

//  LocalWords:  Pathtracing Raycasting
